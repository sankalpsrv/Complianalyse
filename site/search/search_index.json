{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Schematise Documentation Developed by Sankalp Srivastava for the FifthElephant's Open Source AI Hackathon. It is a statute to XML converter that seeks maximum possible adherence with the AkomaNtoso and LegalRuleML family of XML formats. This documentation site was created to guide further development and may be incomplete. For further queries, reach out to the creator through one of the profiles linked here Project layout (documentation) mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. Schematise_py-and-main_py.md model_py.md combinedprocess_py.md metamodelAndRAG_py.md utils_py.md","title":"Home"},{"location":"#welcome-to-the-schematise-documentation","text":"Developed by Sankalp Srivastava for the FifthElephant's Open Source AI Hackathon. It is a statute to XML converter that seeks maximum possible adherence with the AkomaNtoso and LegalRuleML family of XML formats. This documentation site was created to guide further development and may be incomplete. For further queries, reach out to the creator through one of the profiles linked here","title":"Welcome to the Schematise Documentation"},{"location":"#project-layout-documentation","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. Schematise_py-and-main_py.md model_py.md combinedprocess_py.md metamodelAndRAG_py.md utils_py.md","title":"Project layout (documentation)"},{"location":"Schematise_py-and-main_py/","text":"main.py and Schematise.py Table of Contents Introduction \"import\" statements Functions Checklist of features across Streamlit and LocalWorkflow 1. Introduction Schematise.py This is used in the Streamlit version of the app to create a GUI interface, currently hosted on schematise.streamlit.app. main.py This is used in the LocalWorkflow to create a CLI interface for the application. The LocalWorkflow, most notably implements a HuggingFacePipeline, which can be used to run the application on models that don't pose restrictions on utilisation for creation of datasets. 2. \"import\" statements or dependencies .env file with IK API Key and Open AI Key if needed 3. Functions and classes Schematise.py - main() creates the app's main page which allows users to: pass their IndianKanoon key or upload the CSV file If IndianKanoon is selected, pass the document number Allows user to specify which format they want (LegalRuleML or LegalDocML) Specify if a certain range of the csv file is to be converted only Allows users to see a dataframe for the range selected Writes the XML generated in .TXT format for the user This allows the user to verify the XML on their own Passes all the required values by other pages in the app to the session variables Schematise.py - set_env(), load_data() used to create a cache of the data which is created or stored by these functions For environment variables holding the IK API key and OpenAI Key, so that user does not have to re-enter them and for the dataframe selected Schematise.py - get_XML() makes the call to combinedProcess.py for generating the XML at the backend main.py - main() Part of the LocalWorkflow Creates a workflow that prompts user for each of the conditions they want to be implemented Asks user for document number, if IndianKanoon is selected, and thereafter creates a csv file out of the sections in a standard format. passes the csv_file created to utils.csv_parser XML_arg and num_interval are still in progress, and are intended to contain the parameters for metamodel alignment if required. 4. Checklist of features across formats (TBD = To Be Developed) Feature Streamlit LocalWorkflow LegalDocML LegalRuleML OpenAI option Yes Yes Yes Yes IndianKanoon option Yes Yes Yes Yes CSV upload option Yes Yes Yes Yes Download XML file Yes Yes Yes Yes Dataframe viewing after selection Yes No Yes (in Streamlit) Yes (in Streamlit)","title":"Main.py"},{"location":"Schematise_py-and-main_py/#mainpy-and-schematisepy","text":"","title":"main.py and Schematise.py"},{"location":"Schematise_py-and-main_py/#table-of-contents","text":"Introduction \"import\" statements Functions Checklist of features across Streamlit and LocalWorkflow","title":"Table of Contents"},{"location":"Schematise_py-and-main_py/#1-introduction","text":"","title":"1. Introduction"},{"location":"Schematise_py-and-main_py/#schematisepy","text":"This is used in the Streamlit version of the app to create a GUI interface, currently hosted on schematise.streamlit.app.","title":"Schematise.py"},{"location":"Schematise_py-and-main_py/#mainpy","text":"This is used in the LocalWorkflow to create a CLI interface for the application. The LocalWorkflow, most notably implements a HuggingFacePipeline, which can be used to run the application on models that don't pose restrictions on utilisation for creation of datasets.","title":"main.py"},{"location":"Schematise_py-and-main_py/#2-import-statements-or-dependencies","text":".env file with IK API Key and Open AI Key if needed","title":"2. \"import\" statements or dependencies"},{"location":"Schematise_py-and-main_py/#3-functions-and-classes","text":"","title":"3. Functions and classes"},{"location":"Schematise_py-and-main_py/#schematisepy-main","text":"creates the app's main page which allows users to: pass their IndianKanoon key or upload the CSV file If IndianKanoon is selected, pass the document number Allows user to specify which format they want (LegalRuleML or LegalDocML) Specify if a certain range of the csv file is to be converted only Allows users to see a dataframe for the range selected Writes the XML generated in .TXT format for the user This allows the user to verify the XML on their own Passes all the required values by other pages in the app to the session variables","title":"Schematise.py - main()"},{"location":"Schematise_py-and-main_py/#schematisepy-set_env-load_data","text":"used to create a cache of the data which is created or stored by these functions For environment variables holding the IK API key and OpenAI Key, so that user does not have to re-enter them and for the dataframe selected","title":"Schematise.py - set_env(), load_data()"},{"location":"Schematise_py-and-main_py/#schematisepy-get_xml","text":"makes the call to combinedProcess.py for generating the XML at the backend","title":"Schematise.py - get_XML()"},{"location":"Schematise_py-and-main_py/#mainpy-main","text":"Part of the LocalWorkflow Creates a workflow that prompts user for each of the conditions they want to be implemented Asks user for document number, if IndianKanoon is selected, and thereafter creates a csv file out of the sections in a standard format. passes the csv_file created to utils.csv_parser XML_arg and num_interval are still in progress, and are intended to contain the parameters for metamodel alignment if required.","title":"main.py - main()"},{"location":"Schematise_py-and-main_py/#4-checklist-of-features-across-formats","text":"(TBD = To Be Developed) Feature Streamlit LocalWorkflow LegalDocML LegalRuleML OpenAI option Yes Yes Yes Yes IndianKanoon option Yes Yes Yes Yes CSV upload option Yes Yes Yes Yes Download XML file Yes Yes Yes Yes Dataframe viewing after selection Yes No Yes (in Streamlit) Yes (in Streamlit)","title":"4. Checklist of features across formats"},{"location":"combinedprocess_py/","text":"combinedProcess.py Table of Contents Introduction \"import\" statements Functions Checklist of features across Streamlit and LocalWorkflow 1. Introduction Collects the response from a call to model.py and adds further processing where needed. 2. \"import\" statements [To be completed] 3. Functions and classes responseGetter(openai_key, df2, llm, format_chosen) Iterates through each row of the dataframe passed to it as a parameter 'df2' and passes it to the model.py Prepends the LegalRuleML and LegalDocML namespace to the start of the XML generated and appends it with the relevant closing tag Joins each XML response into a \".txt\" document. metamodel_options() implemented as a part of metamodelandRAG.py for the STreamlit app through a GUI allows users to choose between the 7 available metamodel definitions and RFD files for aligning their XML output more accurately with the XML output generated. creates an interface that terminates when users press enter returns the list of metamodel options selected by the user similarityProcess implemented in a separate page in Streamlit app Seeks to get list of similarities between XML tags and their attributes from utils.py Allows user to upload corrected file in case of similarities detected For the Local Workflow, it is a WIP, no calls are made to it currently 4. Checklist of features across formats Feature Streamlit LocalWorkflow LegalDocML LegalRuleML Metamodel alignment interface Not in this module, but otherwise present Yes No Yes Namespace and closing tag adition Yes Yes Yes Yes Metamodel option selection Yes (one at a time), but in a separate module Yes, multiple, and in order selected No Yes","title":"combinedProcess.py"},{"location":"combinedprocess_py/#combinedprocesspy","text":"","title":"combinedProcess.py"},{"location":"combinedprocess_py/#table-of-contents","text":"Introduction \"import\" statements Functions Checklist of features across Streamlit and LocalWorkflow","title":"Table of Contents"},{"location":"combinedprocess_py/#1-introduction","text":"Collects the response from a call to model.py and adds further processing where needed.","title":"1. Introduction"},{"location":"combinedprocess_py/#2-import-statements","text":"[To be completed]","title":"2. \"import\" statements"},{"location":"combinedprocess_py/#3-functions-and-classes","text":"","title":"3. Functions and classes"},{"location":"combinedprocess_py/#responsegetteropenai_key-df2-llm-format_chosen","text":"Iterates through each row of the dataframe passed to it as a parameter 'df2' and passes it to the model.py Prepends the LegalRuleML and LegalDocML namespace to the start of the XML generated and appends it with the relevant closing tag Joins each XML response into a \".txt\" document.","title":"responseGetter(openai_key, df2, llm, format_chosen)"},{"location":"combinedprocess_py/#metamodel_options","text":"implemented as a part of metamodelandRAG.py for the STreamlit app through a GUI allows users to choose between the 7 available metamodel definitions and RFD files for aligning their XML output more accurately with the XML output generated. creates an interface that terminates when users press enter returns the list of metamodel options selected by the user","title":"metamodel_options()"},{"location":"combinedprocess_py/#similarityprocess","text":"implemented in a separate page in Streamlit app Seeks to get list of similarities between XML tags and their attributes from utils.py Allows user to upload corrected file in case of similarities detected For the Local Workflow, it is a WIP, no calls are made to it currently","title":"similarityProcess"},{"location":"combinedprocess_py/#4-checklist-of-features-across-formats","text":"Feature Streamlit LocalWorkflow LegalDocML LegalRuleML Metamodel alignment interface Not in this module, but otherwise present Yes No Yes Namespace and closing tag adition Yes Yes Yes Yes Metamodel option selection Yes (one at a time), but in a separate module Yes, multiple, and in order selected No Yes","title":"4. Checklist of features across formats"},{"location":"metamodelAndRAG_py/","text":"metamodelAndRAG.py Table of Contents Introduction \"import\" statements Functions Checklist of features across Streamlit and LocalWorkflow 1. Introduction The functionality for metamodel tweaking using RAG has been isolated in this python file for the purpose of creating further modifications when required to this part of the process. This function is present in both Streamlit and LocalWorkflow versions. 2. \"import\" statements [To be completed] 3. Functions and classes class CustomRetriever(BaseRetriever): a self-querying CustomRetriver that is utilised to extract data from a list of metamodel definitions and example RDF files getRAG_metamodels(openai_key, text_value, metamodel_number): extracts the metamodel from the CustomRetriever Object makes a call to model.py's RAGPrompt function that handles the model request functionality Currently, it is very resource consuming on the HuggingFacePipeline in the LocalWorkflow, hence it is preferred not to use this WIP: In future, it is intended to implement one of the Vectorstore retrievers available within the LangChain framework, which might require OpenAI key metamodel_operations(openai_key, text_value, i, metamodels_to_process, llm_selected=\"OpenAI\"): creates the interface between the combiendProcess and metamodelAndRAG files stores the output from metamodel alignment in the working directory 4. Checklist of features across formats (TBD = To Be Developed) Feature Streamlit LocalWorkflow LegalDocML LegalRuleML Self-Querying RAG Yes Yes No Yes HuggingFaceOption No Difficult (resource-intensive) No Yes VectorStore RAG TBD TBD TBD TBD","title":"metamodelAndRAG.py"},{"location":"metamodelAndRAG_py/#metamodelandragpy","text":"","title":"metamodelAndRAG.py"},{"location":"metamodelAndRAG_py/#table-of-contents","text":"Introduction \"import\" statements Functions Checklist of features across Streamlit and LocalWorkflow","title":"Table of Contents"},{"location":"metamodelAndRAG_py/#1-introduction","text":"The functionality for metamodel tweaking using RAG has been isolated in this python file for the purpose of creating further modifications when required to this part of the process. This function is present in both Streamlit and LocalWorkflow versions.","title":"1. Introduction"},{"location":"metamodelAndRAG_py/#2-import-statements","text":"[To be completed]","title":"2. \"import\" statements"},{"location":"metamodelAndRAG_py/#3-functions-and-classes","text":"","title":"3. Functions and classes"},{"location":"metamodelAndRAG_py/#class-customretrieverbaseretriever","text":"a self-querying CustomRetriver that is utilised to extract data from a list of metamodel definitions and example RDF files","title":"class CustomRetriever(BaseRetriever):"},{"location":"metamodelAndRAG_py/#getrag_metamodelsopenai_key-text_value-metamodel_number","text":"extracts the metamodel from the CustomRetriever Object makes a call to model.py's RAGPrompt function that handles the model request functionality Currently, it is very resource consuming on the HuggingFacePipeline in the LocalWorkflow, hence it is preferred not to use this WIP: In future, it is intended to implement one of the Vectorstore retrievers available within the LangChain framework, which might require OpenAI key","title":"getRAG_metamodels(openai_key, text_value, metamodel_number):"},{"location":"metamodelAndRAG_py/#metamodel_operationsopenai_key-text_value-i-metamodels_to_process-llm_selectedopenai","text":"creates the interface between the combiendProcess and metamodelAndRAG files stores the output from metamodel alignment in the working directory","title":"metamodel_operations(openai_key, text_value, i, metamodels_to_process, llm_selected=\"OpenAI\"):"},{"location":"metamodelAndRAG_py/#4-checklist-of-features-across-formats","text":"(TBD = To Be Developed) Feature Streamlit LocalWorkflow LegalDocML LegalRuleML Self-Querying RAG Yes Yes No Yes HuggingFaceOption No Difficult (resource-intensive) No Yes VectorStore RAG TBD TBD TBD TBD","title":"4. Checklist of features across formats"},{"location":"model_py/","text":"model.py Table of Contents Introduction \"import\" statements Functions Checklist of features across Streamlit and LocalWorkflow 1. Introduction Implements LangChain for implementing example selection, prompting, LLMChain, and more. Reason - This makes the development capable of expanding on a FOSS framework which increases mutability (such as between choice of LLMs) 2. \"import\" statements [To be completed] 3. Functions and classes Global variables hf_global | global scope | used to store HuggingFacePipeline object llm_global | global scope | stores choice of llm - either OpenAI or CustomExampleSelector class created on the basis of LangChain documentation for creating a kind of self-querying retriever takes the format chosen as the \"input_variable\" and depending on that returns the examples to be used in the RAG Chain instantiate_model reads the value in llm_global creates a huggingface object for the transformer pipeline (in case of LocalWorkflow only) or returns an OpenAI chain send_request forms the interface for passing the prompts to the chat models for output constructs a chat prompt template using the format chosen and by creating an object of the CustomExampleSelector class passes the chat prompt template to an LLMChain Reason - can be used to create more complex RAG Chains in the future RAGPrompt Runs a system prompt which contains the definition as well as extract of a metamodel from the LegalRuleML documentation Filters through a list of metamodel definition and XML through a custom Retriever object which is a self-querying retriever made using LangChain's example for CustomRetriever class input_dict is a dictionary that contains the XML for alignment with the metamodel. 4. Checklist of features across formats (TBD = To Be Developed) Feature Streamlit LocalWorkflow LegalDocML LegalRuleML OpenAI option Yes Yes Yes Yes HuggingFaceOption No Yes Yes Yes Metamodel Yes Yes No Yes Example selection Yes Yes TBD TBD","title":"model.py"},{"location":"model_py/#modelpy","text":"","title":"model.py"},{"location":"model_py/#table-of-contents","text":"Introduction \"import\" statements Functions Checklist of features across Streamlit and LocalWorkflow","title":"Table of Contents"},{"location":"model_py/#1-introduction","text":"Implements LangChain for implementing example selection, prompting, LLMChain, and more. Reason - This makes the development capable of expanding on a FOSS framework which increases mutability (such as between choice of LLMs)","title":"1. Introduction"},{"location":"model_py/#2-import-statements","text":"[To be completed]","title":"2. \"import\" statements"},{"location":"model_py/#3-functions-and-classes","text":"","title":"3. Functions and classes"},{"location":"model_py/#global-variables","text":"hf_global | global scope | used to store HuggingFacePipeline object llm_global | global scope | stores choice of llm - either OpenAI or","title":"Global variables"},{"location":"model_py/#customexampleselector","text":"class created on the basis of LangChain documentation for creating a kind of self-querying retriever takes the format chosen as the \"input_variable\" and depending on that returns the examples to be used in the RAG Chain","title":"CustomExampleSelector"},{"location":"model_py/#instantiate_model","text":"reads the value in llm_global creates a huggingface object for the transformer pipeline (in case of LocalWorkflow only) or returns an OpenAI chain","title":"instantiate_model"},{"location":"model_py/#send_request","text":"forms the interface for passing the prompts to the chat models for output constructs a chat prompt template using the format chosen and by creating an object of the CustomExampleSelector class passes the chat prompt template to an LLMChain Reason - can be used to create more complex RAG Chains in the future","title":"send_request"},{"location":"model_py/#ragprompt","text":"Runs a system prompt which contains the definition as well as extract of a metamodel from the LegalRuleML documentation Filters through a list of metamodel definition and XML through a custom Retriever object which is a self-querying retriever made using LangChain's example for CustomRetriever class input_dict is a dictionary that contains the XML for alignment with the metamodel.","title":"RAGPrompt"},{"location":"model_py/#4-checklist-of-features-across-formats","text":"(TBD = To Be Developed) Feature Streamlit LocalWorkflow LegalDocML LegalRuleML OpenAI option Yes Yes Yes Yes HuggingFaceOption No Yes Yes Yes Metamodel Yes Yes No Yes Example selection Yes Yes TBD TBD","title":"4. Checklist of features across formats"},{"location":"utils_py/","text":"utils.py Table of Contents Introduction \"import\" statements Functions Checklist of features across Streamlit and LocalWorkflow 1. Introduction This contains a set of utility functions that are necessary to be invoked across various modules in the app. 2. \"import\" statements thefuzz Used for calculating SimpleRatio pandas Used to create dataframe out of CSV file xml.etree For parsing the contents of the XML file 3. Functions and classes csv_parser(filename, start_value=70, end_value=73) creates a dataframe using pandas range can be specified by setting df_condition to \"1\" find_last_closing_tag_index(xml_string) finds the last closing tag '>' to strip the code block from the XML output generated strip_code_block(string) Used in LocalWorkflow and with HuggingFacePipeline extracts the XML output from the entire chat response of the LLM This ensures that XML_operations such as similarity processing and checking for general validity can be conducted even when using the LocalWorkflow XML_Similarity(XML_responses, text_value) takes two XML files, depending on the index numbers chosen by the user from the dataframe creates a dictionary of elements and attributes calculates the similarity between each element and attribute from each of the XML files, comparing both elements and attributes of each file with each other. Reason: In the absence of consistency amongst similarly generated XML tags across various iterations, they are compared so that user can change serialisation of the numbering if it occurs across various tags WIP: It may be necessary to allow user to view and select each XML portion as per their preference, or check throughout the document Currently implemented only in Streamlit GUI 4. Checklist of features across formats (TBD = To Be Developed) Feature Streamlit LocalWorkflow LegalDocML LegalRuleML Dataframe generation Yes Yes Yes Yes strip_code_block No Yes Yes Yes XML_similarity testing Yes TBD Yes Yes","title":"utils.py"},{"location":"utils_py/#utilspy","text":"","title":"utils.py"},{"location":"utils_py/#table-of-contents","text":"Introduction \"import\" statements Functions Checklist of features across Streamlit and LocalWorkflow","title":"Table of Contents"},{"location":"utils_py/#1-introduction","text":"This contains a set of utility functions that are necessary to be invoked across various modules in the app.","title":"1. Introduction"},{"location":"utils_py/#2-import-statements","text":"thefuzz Used for calculating SimpleRatio pandas Used to create dataframe out of CSV file xml.etree For parsing the contents of the XML file","title":"2. \"import\" statements"},{"location":"utils_py/#3-functions-and-classes","text":"","title":"3. Functions and classes"},{"location":"utils_py/#csv_parserfilename-start_value70-end_value73","text":"creates a dataframe using pandas range can be specified by setting df_condition to \"1\"","title":"csv_parser(filename, start_value=70, end_value=73)"},{"location":"utils_py/#find_last_closing_tag_indexxml_string","text":"finds the last closing tag '>' to strip the code block from the XML output generated","title":"find_last_closing_tag_index(xml_string)"},{"location":"utils_py/#strip_code_blockstring","text":"Used in LocalWorkflow and with HuggingFacePipeline extracts the XML output from the entire chat response of the LLM This ensures that XML_operations such as similarity processing and checking for general validity can be conducted even when using the LocalWorkflow","title":"strip_code_block(string)"},{"location":"utils_py/#xml_similarityxml_responses-text_value","text":"takes two XML files, depending on the index numbers chosen by the user from the dataframe creates a dictionary of elements and attributes calculates the similarity between each element and attribute from each of the XML files, comparing both elements and attributes of each file with each other. Reason: In the absence of consistency amongst similarly generated XML tags across various iterations, they are compared so that user can change serialisation of the numbering if it occurs across various tags WIP: It may be necessary to allow user to view and select each XML portion as per their preference, or check throughout the document Currently implemented only in Streamlit GUI","title":"XML_Similarity(XML_responses, text_value)"},{"location":"utils_py/#4-checklist-of-features-across-formats","text":"(TBD = To Be Developed) Feature Streamlit LocalWorkflow LegalDocML LegalRuleML Dataframe generation Yes Yes Yes Yes strip_code_block No Yes Yes Yes XML_similarity testing Yes TBD Yes Yes","title":"4. Checklist of features across formats"}]}